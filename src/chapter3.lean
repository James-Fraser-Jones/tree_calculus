import tactic natree.natree

namespace chapter3

  --equational "axioms"
  @[simp] def kernel {y z} : ‚ñ≥‚¨ù‚ñ≥‚¨ùy‚¨ùz = y := natree.kernel
  @[simp] def stem {x y z} : ‚ñ≥‚¨ù(‚ñ≥‚¨ùx)‚¨ùy‚¨ùz = y‚¨ùz‚¨ù(x‚¨ùz) := natree.stem
  @[simp] def fork {w x y z} : ‚ñ≥‚¨ù(‚ñ≥‚¨ùw‚¨ùx)‚¨ùy‚¨ùz = z‚¨ùw‚¨ùx := natree.fork

  --------------------------------------------------------------------

  --Definitions introduced in this chapter:

  --Fundamental Combinators
  def K := ‚ñ≥‚¨ù‚ñ≥
  def I := ‚ñ≥‚¨ùK‚¨ùK
  def D := ‚ñ≥‚¨ùK‚¨ù(K‚¨ù‚ñ≥)
  def d (x) := ‚ñ≥‚¨ù(‚ñ≥‚¨ùx)
  def S := (d (K‚¨ùD))‚¨ù((d K)‚¨ù(K‚¨ùD))

  --Programs
  inductive is_program : ùïã ‚Üí Prop
  | kernel : is_program ‚ñ≥
  | stem {a} (h : is_program a) : is_program (‚ñ≥‚¨ùa)
  | fork {a b} (h‚ÇÅ : is_program a) (h‚ÇÇ : is_program b) : is_program (‚ñ≥‚¨ùa‚¨ùb)

  def program := {t : ùïã // is_program t}

  --Propositional Logic
  def true := K
  def false := K‚¨ùI

  def and := d (K‚¨ù(K‚¨ùI))
  def or := (d (K‚¨ùK))‚¨ùI
  def implies := d (K‚¨ùK)
  def not := (d (K‚¨ùK))‚¨ù((d (K‚¨ù(K‚¨ùI)))‚¨ùI)
  def iff := ‚ñ≥‚¨ù(‚ñ≥‚¨ùI‚¨ùnot)‚¨ù‚ñ≥

  --Pairs
  def Pair := ‚ñ≥

  def first (p) := ‚ñ≥‚¨ùp‚¨ù‚ñ≥‚¨ùK
  def second (p) := ‚ñ≥‚¨ùp‚¨ù‚ñ≥‚¨ù(K‚¨ùI)

  --Iterated Application
  def iterate : ‚Ñï ‚Üí ùïã ‚Üí ùïã ‚Üí ùïã
  | 0 a b := b
  | (n+1) a b := a‚¨ù(iterate n a b)

  notation a ^ n ‚¨ù b := iterate n a b

  --Natural Numbers
  def nat_to_natree (n) := K^n‚¨ù‚ñ≥

  def zero := ‚ñ≥
  def successor := K
  def isZero := (d (K^4‚¨ùI))‚¨ù((d (K‚¨ùK))‚¨ù‚ñ≥)
  def predecessor := (d (K^2‚¨ùI))‚¨ù((d (K‚¨ù‚ñ≥))‚¨ù‚ñ≥)

  --Fundamental Queries
  def query (is0 is1 is2) := (d (K‚¨ùis1))‚¨ù((d (K^2‚¨ùI))‚¨ù((d (K^5‚¨ùis2))‚¨ù((d (K^3‚¨ùis0))‚¨ù‚ñ≥)))
  def isLeaf := query K (K‚¨ùI) (K‚¨ùI)
  def isStem := query (K‚¨ùI) K (K‚¨ùI)
  def isFork := query (K‚¨ùI) (K‚¨ùI) K

  --------------------------------------------------------------------

  --Exercise 1
  lemma K_prop {x y} : K‚¨ùx‚¨ùy = x := by simp [K]
  lemma S_prop {x y z} : S‚¨ùx‚¨ùy‚¨ùz = x‚¨ùz‚¨ù(y‚¨ùz) := by simp [S, d, D, K]

  def D'_deriv : {D' // ‚àÄ x y z, D'‚¨ùx‚¨ùy‚¨ùz = y‚¨ùz‚¨ù(x‚¨ùz)} := begin
    split,
    intros x y z,

    rw ‚ÜêS_prop,

    apply congr,
    apply congr,
    refl,

    symmetry,
    transitivity,
    apply congr,
    refl,
    symmetry,
    apply K_prop,
    exact y,
    symmetry,

    rw ‚ÜêS_prop,

    apply congr,
    apply congr,
    refl,

    symmetry,
    transitivity,
    apply congr,
    apply congr,
    refl,
    symmetry,
    apply K_prop,
    exact x,
    refl,
    symmetry,

    symmetry,
    transitivity,
    symmetry,
    apply S_prop,
    symmetry,

    apply congr,
    apply congr,
    refl,

    repeat {refl},
  end
  def D' := S‚¨ù(K‚¨ù(S‚¨ùS))‚¨ùK
  example : D'_deriv.val = D' := rfl

  --Exercise 2
  example {y} : and‚¨ùfalse‚¨ùy = false := by simp [and, d, D, false, I, K]

  --Exercise 3
  example : or‚¨ùtrue‚¨ùtrue = true := by simp [or, d, D, true, false, I, K]
  example : or‚¨ùtrue‚¨ùfalse = true := by simp [or, d, D, true, false, I, K]
  example : or‚¨ùfalse‚¨ùtrue = true := by simp [or, d, D, true, false, I, K]
  example : or‚¨ùfalse‚¨ùfalse = false := by simp [or, d, D, true, false, I, K]

  example : implies‚¨ùtrue‚¨ùtrue = true := by simp [implies, d, D, true, false, I, K]
  example : implies‚¨ùtrue‚¨ùfalse = false := by simp [implies, d, D, true, false, I, K]
  example : implies‚¨ùfalse‚¨ùtrue = true := by simp [implies, d, D, true, false, I, K]
  example : implies‚¨ùfalse‚¨ùfalse = true := by simp [implies, d, D, true, false, I, K]

  example : not‚¨ùtrue = false := by simp [not, d, D, true, false, I, K]
  example : not‚¨ùfalse = true := by simp [not, d, D, true, false, I, K]

  example : iff‚¨ùtrue‚¨ùtrue = true := by simp [iff, not, d, D, true, false, I, K]
  example : iff‚¨ùtrue‚¨ùfalse = false := by simp [iff, not, d, D, true, false, I, K]
  example : iff‚¨ùfalse‚¨ùtrue = false := by simp [iff, not, d, D, true, false, I, K]
  example : iff‚¨ùfalse‚¨ùfalse = true := by simp [iff, not, d, D, true, false, I, K]

  --Exercise 4
  def fst_deriv : {fst // ‚àÄ p, fst‚¨ùp = first p} := begin
    split,
    intro p,
    rw first,

    symmetry,
    transitivity,
    symmetry,
    apply fork,
    exact ‚ñ≥,
    symmetry,

    rw ‚ÜêK,

    symmetry,
    transitivity,
    apply congr,
    apply congr,
    refl,
    symmetry,
    apply K_prop,
    exact p,
    refl,
    symmetry,

    symmetry,
    transitivity,
    symmetry,
    apply S_prop,
    symmetry,

    apply congr,
    apply congr,
    refl,

    repeat {refl},
  end
  def fst := S‚¨ù(K‚¨ù(‚ñ≥‚¨ù(K‚¨ùK)‚¨ù‚ñ≥))‚¨ù‚ñ≥
  example : fst_deriv.val = fst := rfl
  lemma fst_prop {x y} : fst‚¨ù(Pair‚¨ùx‚¨ùy) = x := by simp [fst, Pair, S, d, D, K]

  def snd := S‚¨ù(K‚¨ù(‚ñ≥‚¨ù(K‚¨ù(K‚¨ùI))‚¨ù‚ñ≥))‚¨ù‚ñ≥
  lemma snd_prop {x y} : snd‚¨ù(Pair‚¨ùx‚¨ùy) = y := by simp [snd, Pair, S, d, D, I, K]

  --Exercise 5
  lemma predecessor_prop_1 : predecessor‚¨ùzero = zero := by simp [predecessor, zero, d, iterate, I, K]
  lemma predecessor_prop_2 {n} : predecessor‚¨ù(successor‚¨ùn) = n := by simp [predecessor, successor, d, iterate, I, K]

  --Exercise 6
  def nat_to_natree' (n) := ‚ñ≥^n‚¨ù‚ñ≥

  def zero' := ‚ñ≥
  example : nat_to_natree' 0 = zero := rfl

  def successor' := ‚ñ≥
  example {n} : successor'‚¨ù(nat_to_natree' n) = nat_to_natree' n.succ := rfl

  def isZero' := S‚¨ù(S‚¨ù‚ñ≥‚¨ù(K‚¨ùK))‚¨ù(K‚¨ù(K‚¨ùI))
  example : isZero'‚¨ùzero' = true := by simp [isZero', zero', true, S, d, D, I, K]
  example {n} : isZero'‚¨ù(successor'‚¨ùn) = false := by simp [isZero', successor', false, S, d, D, I, K]

  def predecessor' := S‚¨ù(K‚¨ù(‚ñ≥‚¨ù(K‚¨ùK)‚¨ù‚ñ≥))‚¨ù(S‚¨ù(K‚¨ù‚ñ≥)‚¨ù(S‚¨ù(S‚¨ùisZero'‚¨ùI)‚¨ù(S‚¨ùI‚¨ù(K‚¨ù‚ñ≥))))
  example : predecessor'‚¨ùzero' = zero' := by simp [predecessor', zero', isZero', S, d, D, I, K]
  example {n} : predecessor'‚¨ù(successor'‚¨ùn) = n := by simp [predecessor', successor', isZero', S, d, D, I, K]

  --Exercise 7
  #reduce isLeaf
  def isLeafVal := (‚ñ≥‚¨ù(‚ñ≥‚¨ù(‚ñ≥‚¨ù‚ñ≥‚¨ù(‚ñ≥‚¨ù‚ñ≥‚¨ù(‚ñ≥‚¨ù(‚ñ≥‚¨ù‚ñ≥)‚¨ù(‚ñ≥‚¨ù‚ñ≥)))))‚¨ù(‚ñ≥‚¨ù(‚ñ≥‚¨ù(‚ñ≥‚¨ù‚ñ≥‚¨ù(‚ñ≥‚¨ù‚ñ≥‚¨ù(‚ñ≥‚¨ù(‚ñ≥‚¨ù‚ñ≥)‚¨ù(‚ñ≥‚¨ù‚ñ≥)))))‚¨ù(‚ñ≥‚¨ù(‚ñ≥‚¨ù(‚ñ≥‚¨ù‚ñ≥‚¨ù(‚ñ≥‚¨ù‚ñ≥‚¨ù(‚ñ≥‚¨ù‚ñ≥‚¨ù(‚ñ≥‚¨ù‚ñ≥‚¨ù(‚ñ≥‚¨ù‚ñ≥‚¨ù(‚ñ≥‚¨ù‚ñ≥‚¨ù(‚ñ≥‚¨ù(‚ñ≥‚¨ù‚ñ≥)‚¨ù(‚ñ≥‚¨ù‚ñ≥)))))))))‚¨ù(‚ñ≥‚¨ù(‚ñ≥‚¨ù(‚ñ≥‚¨ù‚ñ≥‚¨ù(‚ñ≥‚¨ù‚ñ≥‚¨ù(‚ñ≥‚¨ù‚ñ≥‚¨ù(‚ñ≥‚¨ù‚ñ≥)))))‚¨ù‚ñ≥))))
  example : isLeafVal = isLeaf := rfl

  example : isLeafVal‚¨ù‚ñ≥ = true := by simp [isLeafVal, true, K]
  example : isLeafVal‚¨ùK = false := by simp [isLeafVal, false, K, I]
  example : isLeafVal‚¨ù(K‚¨ù‚ñ≥) = false := by simp [isLeafVal, false, K, I]

  --Exercise 8
  /-
  a(n) gives number of binary trees where depth <= n
  a(0) = 1
  a(n) = a(n-1) + a(n-1)^2 + 1

  b(n) gives number of binary trees where depth = n
  b(0) = 1
  b(n) = a(n-1)^2 + 1
  -/

end chapter3