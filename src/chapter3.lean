import tactic natree.natree

namespace chapter3

  --equational "axioms"
  @[simp] def kernel {y z} : ‚ñ≥‚¨ù‚ñ≥‚¨ùy‚¨ùz = y := natree.kernel
  @[simp] def stem {x y z} : ‚ñ≥‚¨ù(‚ñ≥‚¨ùx)‚¨ùy‚¨ùz = y‚¨ùz‚¨ù(x‚¨ùz) := natree.stem
  @[simp] def fork {w x y z} : ‚ñ≥‚¨ù(‚ñ≥‚¨ùw‚¨ùx)‚¨ùy‚¨ùz = z‚¨ùw‚¨ùx := natree.fork

  --K combinator (similar to Kernel rule)
  def derive_K : {K : ùïã // ‚àÄ x y, K‚¨ùx‚¨ùy = x} := begin
    --metavariable ?m_1 introduced for K
    split,
    intros x y, 

    --use kernel rule
    symmetry,
    transitivity,
    symmetry,
    apply kernel,
    exact y,
    symmetry,

    --remove trailing ys
    apply congr,
    apply congr,
    refl,

    --remove trailing xs
    apply congr,
    apply congr,
    refl,

    --?m_1 = ‚ñ≥‚¨ù‚ñ≥
    
    --finish proof
    repeat {refl},
  end

  def K : ùïã := ‚ñ≥‚¨ù‚ñ≥

  --I combinator (Identity combinator)
  def derive_I : {I : ùïã // ‚àÄ x, I‚¨ùx = x} := begin
    --metavariable ?m_1 introduced for I
    split,
    intro x, 

    --use kernel rule
    symmetry,
    transitivity,
    symmetry,
    apply kernel,
    exact ‚ñ≥‚¨ùx,
    symmetry,

    --use stem rule
    symmetry,
    transitivity,
    symmetry,
    apply stem,
    symmetry,

    --remove trailing xs
    apply congr,
    apply congr,
    refl,

    --?m_1 = ‚ñ≥‚¨ù(‚ñ≥‚¨ù‚ñ≥)‚¨ù(‚ñ≥‚¨ù‚ñ≥)

    --finish proof
    repeat {refl},
  end

  def I : ùïã := ‚ñ≥‚¨ù(‚ñ≥‚¨ù‚ñ≥)‚¨ù(‚ñ≥‚¨ù‚ñ≥)

  --D combinator (flipped S combinator, similar to Stem rule)
  def derive_D : {D : ùïã // ‚àÄ x y z, D‚¨ùx‚¨ùy‚¨ùz = y‚¨ùz‚¨ù(x‚¨ùz)} := begin
    --metavariable ?m_1 introduced for D
    split,
    intros x y z,

    --use stem rule
    symmetry,
    transitivity,
    symmetry,
    apply stem,
    symmetry,

    --remove trailing zs
    apply congr,
    apply congr,
    refl,

    --remove trailing ys
    apply congr,
    apply congr,
    refl,

    --replace ‚ñ≥ with K‚¨ù‚ñ≥‚¨ùx
    symmetry,
    transitivity,
    apply congr,
    apply congr,
    refl,
    symmetry,
    show K‚¨ù‚ñ≥‚¨ùx = ‚ñ≥,
    apply derive_K.property,
    refl,
    symmetry,

    --use stem rule
    symmetry,
    transitivity,
    symmetry,
    apply stem,
    symmetry,

    --remove trailing xs
    apply congr,
    apply congr,
    refl,

    --unfold definition of K
    symmetry,
    transitivity,
    apply congr,
    refl,
    apply congr,
    apply congr,
    refl,
    show K = ‚ñ≥‚¨ù‚ñ≥, 
    refl,
    refl,
    symmetry,

    --?m_1 = ‚ñ≥‚¨ù(‚ñ≥‚¨ù‚ñ≥)‚¨ù(‚ñ≥‚¨ù‚ñ≥‚¨ù‚ñ≥)

    --finish proof
    repeat {refl},
  end

  def D : ùïã := ‚ñ≥‚¨ù(‚ñ≥‚¨ù‚ñ≥)‚¨ù(‚ñ≥‚¨ù‚ñ≥‚¨ù‚ñ≥)

  def d (x : ùïã) : ùïã := ‚ñ≥‚¨ù(‚ñ≥‚¨ùx)
  lemma d_equiv_D {x} : D‚¨ùx = d x := by simp [d, D]

  --derivation of the fundamental queries
  def derive_q {a b c e} : {q : ùïã // ‚àÄ x, q‚¨ùx = ‚ñ≥‚¨ùx‚¨ùa‚¨ùb‚¨ùc‚¨ùe} := begin
    --metavariable ?m_1 introduced for q
    split,
    intro x,

    --replace ‚ñ≥‚¨ùx‚¨ùa with D‚¨ù(K‚¨ùa)‚¨ù‚ñ≥‚¨ùx (utilizing Stem rule)
    symmetry,
    transitivity,
    apply congr,
    apply congr,
    refl,
    apply congr,
    apply congr,
    refl,
    apply congr,
    apply congr,
    refl,
    show ‚ñ≥‚¨ùx‚¨ùa = D‚¨ù(K‚¨ùa)‚¨ù‚ñ≥‚¨ùx,
    symmetry,
    have h : D = derive_D.val := rfl,
    rw h,
    transitivity,
    apply derive_D.property,
    apply congr,
    refl,
    have h‚ÇÇ : K = derive_K.val := rfl,
    rw h‚ÇÇ,
    apply derive_K.property,
    refl,
    refl,
    refl,
    symmetry,

    --replace (D‚¨ù(K‚¨ùa)‚¨ù‚ñ≥)‚¨ùx‚¨ùb with D‚¨ù(K‚¨ùb)‚¨ù(D‚¨ù(K‚¨ùa)‚¨ù‚ñ≥)‚¨ùx (utilizing Stem rule)
    symmetry,
    transitivity,
    apply congr,
    apply congr,
    refl,
    apply congr,
    apply congr,
    refl,
    show (D‚¨ù(K‚¨ùa)‚¨ù‚ñ≥)‚¨ùx‚¨ùb = D‚¨ù(K‚¨ùb)‚¨ù(D‚¨ù(K‚¨ùa)‚¨ù‚ñ≥)‚¨ùx,
    symmetry,
    have h : D = derive_D.val := rfl,
    rw h,
    transitivity,
    apply derive_D.property,
    apply congr,
    refl,
    have h‚ÇÇ : K = derive_K.val := rfl,
    rw h‚ÇÇ,
    apply derive_K.property,
    refl,
    refl,
    symmetry,

    --replace D‚¨ù(K‚¨ùb)‚¨ù(D‚¨ù(K‚¨ùa)‚¨ù‚ñ≥)‚¨ùx‚¨ùc with D‚¨ù(K‚¨ùc)‚¨ù(D‚¨ù(K‚¨ùb)‚¨ù(D‚¨ù(K‚¨ùa)‚¨ù‚ñ≥))‚¨ùx (utilizing Stem rule)
    symmetry,
    transitivity,
    apply congr,
    apply congr,
    refl,
    show D‚¨ù(K‚¨ùb)‚¨ù(D‚¨ù(K‚¨ùa)‚¨ù‚ñ≥)‚¨ùx‚¨ùc = D‚¨ù(K‚¨ùc)‚¨ù(D‚¨ù(K‚¨ùb)‚¨ù(D‚¨ù(K‚¨ùa)‚¨ù‚ñ≥))‚¨ùx,
    symmetry,
    have h : D = derive_D.val := rfl,
    rw h,
    transitivity,
    apply derive_D.property,
    apply congr,
    refl,
    have h‚ÇÇ : K = derive_K.val := rfl,
    rw h‚ÇÇ,
    apply derive_K.property,
    refl,
    symmetry,

    --replace D‚¨ù(K‚¨ùc)‚¨ù(D‚¨ù(K‚¨ùb)‚¨ù(D‚¨ù(K‚¨ùa)‚¨ù‚ñ≥))‚¨ùx‚¨ùd with D‚¨ù(K‚¨ùd)‚¨ù(D‚¨ù(K‚¨ùc)‚¨ù(D‚¨ù(K‚¨ùb)‚¨ù(D‚¨ù(K‚¨ùa)‚¨ù‚ñ≥)))‚¨ùx (utilizing Stem rule)
    symmetry,
    transitivity,
    show D‚¨ù(K‚¨ùc)‚¨ù(D‚¨ù(K‚¨ùb)‚¨ù(D‚¨ù(K‚¨ùa)‚¨ù‚ñ≥))‚¨ùx‚¨ùe = D‚¨ù(K‚¨ùe)‚¨ù(D‚¨ù(K‚¨ùc)‚¨ù(D‚¨ù(K‚¨ùb)‚¨ù(D‚¨ù(K‚¨ùa)‚¨ù‚ñ≥)))‚¨ùx,
    symmetry,
    have h : D = derive_D.val := rfl,
    rw h,
    transitivity,
    apply derive_D.property,
    apply congr,
    refl,
    have h‚ÇÇ : K = derive_K.val := rfl,
    rw h‚ÇÇ,
    apply derive_K.property,
    symmetry,

    --remove xs
    apply congr,
    apply congr,
    refl,
    
    --replace with ds
    symmetry,
    repeat {
      transitivity,
      rw d_equiv_D,
    },
    symmetry,

    --?m_1 = d (K‚¨ùe)‚¨ù(d (K‚¨ùc)‚¨ù(d (K‚¨ùb)‚¨ù(d (K‚¨ùa)‚¨ù‚ñ≥)))

    --finish proof
    repeat {refl},
    
  end

  -- --structure to hold solution to query contraints using 4 arguments: f g h k
  -- structure query_contraints

  -- def bool_to_natree : bool ‚Üí ùïã
  -- | tt := K
  -- | ff := K‚¨ùI

  -- def derive_query : 
  -- {
  --   query : bool ‚Üí bool ‚Üí bool ‚Üí ùïã // 
  --   ‚àÄ is0 is1 is2, ‚àÄ x y, 
  --     (query is0 is1 is2)‚¨ùx = bool_to_natree is0
  --   ‚àß (query is0 is1 is2)‚¨ù(‚ñ≥‚¨ùx) = bool_to_natree is1
  --   ‚àß (query is0 is1 is2)‚¨ù(‚ñ≥‚¨ùx‚¨ùy) = bool_to_natree is2
  -- } := begin
  --   split,
  --   intros is0 is1 is2 x y,
  --   split,

  -- end

  def query (ker ste for x : ùïã) : ùïã := ‚ñ≥‚¨ùx‚¨ù(K‚¨ù(K‚¨ùker))‚¨ù(K‚¨ù(K‚¨ù(K‚¨ù(K‚¨ùfor))))‚¨ùste‚¨ùste
  example {x y : ùïã} : query (K‚¨ùI) (K‚¨ùI) (K) (‚ñ≥) = K‚¨ùI := by simp [K, I, query]
  example {x y : ùïã} : query (K‚¨ùI) (K‚¨ùI) (K) (‚ñ≥‚¨ùx) = K‚¨ùI := by simp [K, I, query]
  example {x y : ùïã} : query (K‚¨ùI) (K‚¨ùI) (K) (‚ñ≥‚¨ùx‚¨ùy) = K := by simp [K, I, query]
end chapter3