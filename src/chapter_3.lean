import tactic natree.natree

namespace chapter3

  variables {w x y z : ùïã}

  ----------------------------3.3 Tree Calculus---------------------------------

  --equational axioms
  @[simp] def kernel : ‚ñ≥‚¨ù‚ñ≥‚¨ùy‚¨ùz = y := natree.kernel
  @[simp] def stem : ‚ñ≥‚¨ù(‚ñ≥‚¨ùx)‚¨ùy‚¨ùz = y‚¨ùz‚¨ù(x‚¨ùz) := natree.stem
  @[simp] def fork : ‚ñ≥‚¨ù(‚ñ≥‚¨ùw‚¨ùx)‚¨ùy‚¨ùz = z‚¨ùw‚¨ùx := natree.fork

  --define primitive combinators
  def K := ‚ñ≥‚¨ù‚ñ≥
  @[simp] theorem r_K : K‚¨ùy‚¨ùz = y := by simp [K]

  def I := ‚ñ≥‚¨ù(‚ñ≥‚¨ù‚ñ≥)‚¨ù(‚ñ≥‚¨ù‚ñ≥)
  @[simp] theorem r_I : I‚¨ùx = x := by simp [I]

  def D := ‚ñ≥‚¨ù(‚ñ≥‚¨ù‚ñ≥)‚¨ù(‚ñ≥‚¨ù‚ñ≥‚¨ù‚ñ≥)
  @[simp] theorem r_D : D‚¨ùx‚¨ùy‚¨ùz = y‚¨ùz‚¨ù(x‚¨ùz) := by simp [D]

  @[simp] def d (x : ùïã) := ‚ñ≥‚¨ù(‚ñ≥‚¨ùx)
  theorem d_eq_r_D : d x = D‚¨ùx := by simp [D]

  --can't do derivation of S combinator because it requires injectivity of (‚¨ù)
  --this proof can only be done with natree.pre, using injectivity of (‚ó¶)

  def S := d(K‚¨ùD) ‚¨ù (d K ‚¨ù (K‚¨ùD))
  @[simp] theorem r_S : S‚¨ùx‚¨ùy‚¨ùz = x‚¨ùz‚¨ù(y‚¨ùz) := by simp [S]

  ----------------------------3.4 Programs---------------------------------

  --programs are natural trees which never have more than 2 branches anywhere in their structure

  --is_program is an inductive predicate on natural trees
  inductive is_program : ùïã ‚Üí Prop
  | node : is_program ‚ñ≥
  | stem {p} (h : is_program p) : is_program (‚ñ≥‚¨ùp)
  | fork {p q} (h‚ÇÅ : is_program p) (h‚ÇÇ : is_program q) : is_program (‚ñ≥‚¨ùp‚¨ùq)

  --program is the type of trees that are programs
  def program := {t : ùïã // is_program t}

  ----------------------------3.5 Propositional Logic---------------------------------

  def true' := K
  @[simp] theorem r_true' : true'‚¨ùx‚¨ùy = x := by simp[true']

  def false' := K‚¨ùI
  @[simp] theorem r_false' : false'‚¨ùx‚¨ùy = y := by simp[false']

  def and' := d(K‚¨ù(K‚¨ùI))
  example : and'‚¨ùx‚¨ùy = x‚¨ùy‚¨ù(K‚¨ùI) := by simp[and']
  @[simp] theorem r_and'_tt : and'‚¨ùtrue'‚¨ùtrue' = true' := by simp[and']
  @[simp] theorem r_and'_tf : and'‚¨ùtrue'‚¨ùfalse' = false' := by simp[and']
  @[simp] theorem r_and'_ft : and'‚¨ùfalse'‚¨ùtrue' = false' := by simp[and', false']
  @[simp] theorem r_and'_ff : and'‚¨ùfalse'‚¨ùfalse' = false' := by simp[and', false']

  def or' := d(K‚¨ùK)‚¨ùI
  def implies' := d(K‚¨ùK)
  def not' := d(K‚¨ùK)‚¨ù(d(K‚¨ù(K‚¨ùI))‚¨ùI)
  def iff' := ‚ñ≥‚¨ù(‚ñ≥‚¨ùI‚¨ùnot')‚¨ù‚ñ≥

  ----------------------------3.6 Pairs---------------------------------

  --...

end chapter3