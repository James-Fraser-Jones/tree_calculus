import tactic natree.pre

--natural trees are pre-trees quotiented by pre-tree equivalence
def natree := quotient natree.pre.equiv

namespace natree

  notation `ùïã` := natree

  def node : ùïã := ‚ü¶‚ñ¢‚üß
  notation `‚ñ≥` := node

  def app' (t‚ÇÅ t‚ÇÇ) := ‚ü¶t‚ÇÅ ‚ó¶ t‚ÇÇ‚üß
  lemma app'_liftable {a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ} (h‚ÇÅ : a‚ÇÅ ‚âà b‚ÇÅ) (h‚ÇÇ : a‚ÇÇ ‚âà b‚ÇÇ) : app' a‚ÇÅ a‚ÇÇ = app' b‚ÇÅ b‚ÇÇ :=
  begin
    repeat {rw wrapp},
    apply quotient.sound,
    apply pre.equiv.congr,
    repeat {assumption}
  end 

  def app : ùïã ‚Üí ùïã ‚Üí ùïã := quotient.lift‚ÇÇ app' @app'_liftable
  infixl `‚¨ù`:60 := app

  theorem quot_dist_app {a b} : ‚ü¶a ‚ó¶ b‚üß = ‚ü¶a‚üß ‚¨ù ‚ü¶b‚üß := rfl

  theorem kernel {y z} : ‚ñ≥‚¨ù‚ñ≥‚¨ùy‚¨ùz = y :=
  begin
    have h‚ÇÅ := quotient.exists_rep y, cases h‚ÇÅ with y' h‚ÇÅ, rw ‚Üêh‚ÇÅ,
    have h‚ÇÇ := quotient.exists_rep z, cases h‚ÇÇ with z' h‚ÇÇ, rw ‚Üêh‚ÇÇ,
    rw node,
    repeat {rw ‚Üêquot_dist_app},
    apply quotient.sound,
    apply pre.equiv.kernel,
  end

  theorem stem {x y z} : ‚ñ≥‚¨ù(‚ñ≥‚¨ùx)‚¨ùy‚¨ùz = y‚¨ùz‚¨ù(x‚¨ùz) :=
  begin
    have h‚ÇÅ := quotient.exists_rep x, cases h‚ÇÅ with x' h‚ÇÅ, rw ‚Üêh‚ÇÅ,
    have h‚ÇÇ := quotient.exists_rep y, cases h‚ÇÇ with y' h‚ÇÇ, rw ‚Üêh‚ÇÇ,
    have h‚ÇÉ := quotient.exists_rep z, cases h‚ÇÉ with z' h‚ÇÉ, rw ‚Üêh‚ÇÉ,
    rw node,
    repeat {rw ‚Üêquot_dist_app},
    apply quotient.sound,
    apply pre.equiv.stem,
  end

  theorem fork {w x y z} : ‚ñ≥‚¨ù(‚ñ≥‚¨ùw‚¨ùx)‚¨ùy‚¨ùz = z‚¨ùw‚¨ùx :=
  begin
    have h‚ÇÅ := quotient.exists_rep w, cases h‚ÇÅ with w' h‚ÇÅ, rw ‚Üêh‚ÇÅ,
    have h‚ÇÇ := quotient.exists_rep x, cases h‚ÇÇ with x' h‚ÇÇ, rw ‚Üêh‚ÇÇ,
    have h‚ÇÉ := quotient.exists_rep y, cases h‚ÇÉ with y' h‚ÇÉ, rw ‚Üêh‚ÇÉ,
    have h‚ÇÑ := quotient.exists_rep z, cases h‚ÇÑ with z' h‚ÇÑ, rw ‚Üêh‚ÇÑ,
    rw node,
    repeat {rw ‚Üêquot_dist_app},
    apply quotient.sound,
    apply pre.equiv.fork,
  end

  -----------------------------------------------------------------------------------
  
  #check @pre.equiv.not_inj
  --(‚¨ù) is not injective
  theorem not_inj : ¬¨ (‚àÄ {a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ}, a‚ÇÅ‚¨ùa‚ÇÇ = b‚ÇÅ‚¨ùb‚ÇÇ ‚Üí a‚ÇÅ = b‚ÇÅ ‚àß a‚ÇÇ = b‚ÇÇ) :=
  begin
    -- intro h,
    -- have h‚ÇÅ := quotient.exists_rep a‚ÇÅ, cases h‚ÇÅ with a‚ÇÅ' h‚ÇÅ, rw ‚Üêh‚ÇÅ, rw ‚Üêh‚ÇÅ at h,
    -- have h‚ÇÇ := quotient.exists_rep a‚ÇÇ, cases h‚ÇÇ with a‚ÇÇ' h‚ÇÇ, rw ‚Üêh‚ÇÇ, rw ‚Üêh‚ÇÇ at h,
    -- have h‚ÇÉ := quotient.exists_rep b‚ÇÅ, cases h‚ÇÉ with b‚ÇÅ' h‚ÇÉ, rw ‚Üêh‚ÇÉ, rw ‚Üêh‚ÇÉ at h,
    -- have h‚ÇÑ := quotient.exists_rep b‚ÇÇ, cases h‚ÇÑ with b‚ÇÇ' h‚ÇÑ, rw ‚Üêh‚ÇÑ, rw ‚Üêh‚ÇÑ at h,
    -- repeat {rw ‚Üêquot_dist_app at h},
    sorry --use pre.equiv.not_inj somehow
  end

  -----------------------------------------------------------------------------------

end natree