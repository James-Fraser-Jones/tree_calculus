import tactic chapter3

open chapter3

namespace chapter4

  -----------------------------------------------------------------------------------

  def is_elem : char ‚Üí ùïã' ‚Üí Prop
  | x (#y) := y = x
  | x ‚ñ¢ := false
  | x (t‚ó¶u) := is_elem x t ‚à® is_elem x u

  instance elem_decidable {x} {t} : decidable (is_elem x t) := begin
    induction t,
    case node {
      left,
      intro h,
      cases h,
    },
    case app : t‚ÇÅ t‚ÇÇ h‚ÇÅ h‚ÇÇ {
      cases h‚ÇÅ,
        cases h‚ÇÇ,
          left,
          intro h,
          cases h,
          apply h‚ÇÅ,
          assumption,
          apply h‚ÇÇ,
          assumption,
        right,
        right,
        assumption,
      cases h‚ÇÇ,
        right,
        left,
        assumption,
      right,
      right,
      assumption,
    },
    case ref {
      rw is_elem,
      exact eq.decidable t x,
    },
  end

  -----------------------------------------------------------------------------------

  def subst' : char ‚Üí ùïã' ‚Üí ùïã' ‚Üí ùïã'
  | x u (#y) := if y = x then u else #y
  | x u ‚ñ¢ := ‚ñ¢
  | x u (s‚ó¶t) := (subst' x u s) ‚ó¶ (subst' x u t)

  lemma subst'_red_t {x} {u t‚ÇÅ t‚ÇÇ} (h : t‚ÇÅ ‚Ü¶ t‚ÇÇ) : subst' x u t‚ÇÅ ‚âà subst' x u t‚ÇÇ := begin
    apply eqv_gen.rel,
    induction h,
    case kernel : y' z' {
      repeat {
        rw subst'
      },
      apply natree.pre.reduces.kernel,
    },
    case stem : x' y' z' {
      repeat {
        rw subst'
      },
      apply natree.pre.reduces.stem,
    },
    case fork : w' x' y' z' {
      repeat {
        rw subst'
      },
      apply natree.pre.reduces.fork,
    },
    case left {
        repeat {
        rw subst'
      },
      apply natree.pre.reduces.left,
      assumption,
    },
    case right {
        repeat {
        rw subst'
      },
      apply natree.pre.reduces.right,
      assumption,
    },
  end

  lemma subst'_red_u {x} {u‚ÇÅ u‚ÇÇ t} (h : u‚ÇÅ ‚Ü¶ u‚ÇÇ) : subst' x u‚ÇÅ t ‚âà subst' x u‚ÇÇ t := begin
    induction t,
    case node {
      reflexivity,
    },
    case app : t‚ÇÅ t‚ÇÇ h‚ÇÅ h‚ÇÇ {
      apply natree.pre.equiv.congr,
      assumption,
      assumption,
    },
    case ref {
      repeat {
        rw subst',
      },
      split_ifs,
      apply eqv_gen.rel,
      assumption,
      reflexivity,
    }
  end
  
  def subst'1 : char ‚Üí ùïã' ‚Üí ùïã ‚Üí ùïã := Œª x u, quotient.lift (Œª t, ‚ü¶subst' x u t‚üß) 
  ( begin
      intros a b h,
      simp,
      induction h,
      case refl {
        refl,
      },
      case symm {
        symmetry,
        assumption,
      },
      case trans {
        transitivity,
        assumption,
        assumption,
      },
      case rel {
        apply subst'_red_t,
        assumption,
      },
    end
  )

  lemma subst'_id {x} {u t} (h : ¬¨ is_elem x t) : subst' x u t = t := begin
    induction t,
    refl,
    case app : v w hv hw {
      rw subst',
      apply congr_arg2,

      apply hv,
      intro p,
      apply h,
      rw is_elem,
      left,
      assumption,

      apply hw,
      intro p,
      apply h,
      rw is_elem,
      right,
      assumption,
    },
    rw subst',
    split_ifs,
    exfalso,
    apply h,
    rw h_1,
    rw is_elem,
    refl,
  end

  -----------------------------------------------------------------------------------

  def subst : char ‚Üí ùïã ‚Üí ùïã ‚Üí ùïã := Œª x, quotient.lift (Œª u, subst'1 x u) 
  ( begin
      intros a b h,
      simp,
      apply funext,
      intro t,
      induction h,
      case refl {
        refl,
      },
      case symm {
        symmetry,
        assumption,
      },
      case trans {
        transitivity,
        assumption,
        assumption,
      },
      case rel : u‚ÇÅ u‚ÇÇ h {
        rw subst'1,
        simp,
        have h‚ÇÅ := quotient.exists_rep t, cases h‚ÇÅ with t' h‚ÇÅ, rw ‚Üêh‚ÇÅ,
        simp,
        apply subst'_red_u,
        assumption,
      }
    end
  )

  lemma subst_ref {x y} {u} : subst x u &y = if x = y then u else &y := begin
    have h‚ÇÅ := quotient.exists_rep (u), cases h‚ÇÅ with u' h‚ÇÅ, rw ‚Üêh‚ÇÅ,
    rw natree.ref,

    split_ifs,

    rw [subst, h],
    simp,
    rw subst'1,
    simp,
    rw subst',
    split_ifs,
    refl,
    refl,

    rw [subst],
    simp,
    rw subst'1,
    simp,
    rw subst',
    split_ifs,
    
    exfalso,
    apply h,
    symmetry,
    assumption,
    refl,
  end

  lemma subst_node {x} {u} : subst x u ‚ñ≥ = ‚ñ≥ := begin
    have h‚ÇÅ := quotient.exists_rep (u), cases h‚ÇÅ with u' h‚ÇÅ, rw ‚Üêh‚ÇÅ,
    rw natree.node,
    rw subst,
    simp,
    rw subst'1,
    simp,
    refl,
  end

  lemma subst_app {x} {u s t} : subst x u (s‚¨ùt) = (subst x u s)‚¨ù(subst x u t) := begin
    have h‚ÇÅ := quotient.exists_rep (u), cases h‚ÇÅ with u' h‚ÇÅ, rw ‚Üêh‚ÇÅ,
    have h‚ÇÇ := quotient.exists_rep (s), cases h‚ÇÇ with s' h‚ÇÇ, rw ‚Üêh‚ÇÇ,
    have h‚ÇÉ := quotient.exists_rep (t), cases h‚ÇÉ with t' h‚ÇÉ, rw ‚Üêh‚ÇÉ,
    rw subst,
    simp,
    rw subst'1,
    simp,
    refl,
  end

  lemma subst_id {x} {u} {t} (h : ¬¨ is_elem x t) : subst x u ‚ü¶t‚üß = ‚ü¶t‚üß := begin
    have h‚ÇÅ := quotient.exists_rep u, cases h‚ÇÅ with u' h‚ÇÅ, rw ‚Üêh‚ÇÅ,
    rw subst,
    dsimp,
    rw subst'1,
    dsimp,
    apply quotient.sound,
    rw subst'_id,
    assumption,
  end

  -----------------------------------------------------------------------------------

  @[simp] def kernel' {y z} : ‚ñ¢‚ó¶‚ñ¢‚ó¶y‚ó¶z ‚âà y := natree.pre.equiv.kernel
  @[simp] def stem' {x y z} : ‚ñ¢‚ó¶(‚ñ¢‚ó¶x)‚ó¶y‚ó¶z ‚âà y‚ó¶z‚ó¶(x‚ó¶z) := natree.pre.equiv.stem
  @[simp] def fork' {w x y z} : ‚ñ¢‚ó¶(‚ñ¢‚ó¶w‚ó¶x)‚ó¶y‚ó¶z ‚âà z‚ó¶w‚ó¶x := natree.pre.equiv.fork
      
  def K' := ‚ñ¢‚ó¶‚ñ¢
  lemma K'_prop {a b} : K'‚ó¶a‚ó¶b ‚âà a := by simp [K']

  def I' := ‚ñ¢‚ó¶K'‚ó¶K'
  lemma I'_prop {a} : I'‚ó¶a ‚âà a := begin
    rw I',
    transitivity,
    apply stem',
    apply K'_prop,
  end

  def d' (x) := ‚ñ¢‚ó¶(‚ñ¢‚ó¶x)
  lemma d'_prop {x y z} : (d' x)‚ó¶y‚ó¶z ‚âà y‚ó¶z‚ó¶(x‚ó¶z) := by simp [d']

  def D' := ‚ñ¢‚ó¶K'‚ó¶(K'‚ó¶‚ñ¢)
  lemma D'_prop {x y z} : D'‚ó¶x‚ó¶y‚ó¶z ‚âà y‚ó¶z‚ó¶(x‚ó¶z) := begin
    rw D',
    transitivity,
    apply natree.pre.equiv.congr_left,
    apply natree.pre.equiv.congr_left,
    transitivity,
    apply stem',
    apply natree.pre.equiv.congr_left,
    apply K'_prop,
    apply stem',
  end

  def S' := (d' (K'‚ó¶D'))‚ó¶((d' K')‚ó¶(K'‚ó¶D'))
  lemma S'_prop {x y z} : S'‚ó¶x‚ó¶y‚ó¶z ‚âà x‚ó¶z‚ó¶(y‚ó¶z) := begin
    rw S',
    transitivity,
    apply natree.pre.equiv.congr_left,
    apply natree.pre.equiv.congr_left,
    transitivity,
    apply d'_prop,
    apply natree.pre.equiv.congr_left,
    transitivity,
    apply d'_prop,
    apply natree.pre.equiv.congr_left,
    apply K'_prop,
    transitivity,
    apply natree.pre.equiv.congr_left,
    transitivity,
    apply D'_prop,
    apply natree.pre.equiv.congr_left,
    apply natree.pre.equiv.congr_left,
    apply K'_prop,
    transitivity,
    apply natree.pre.equiv.congr_left,
    apply natree.pre.equiv.congr_right,
    apply K'_prop,
    apply D'_prop,
  end

  -----------------------------------------------------------------------------------

  --bracket is not liftable because it "does not preserve the equality induced by the evaluation rules" (as covered in the book)
  def bracket : char ‚Üí ùïã' ‚Üí ùïã'
  | x (#y) := if y =  x then I' else K'‚ó¶(#y)
  | x ‚ñ¢ := K'‚ó¶‚ñ¢
  | x (u‚ó¶v) := (d' (bracket x v))‚ó¶(bracket x u)
  lemma bracket_prop {x} {t} : (bracket x t)‚ó¶(#x) ‚âà t := begin
    induction t,
    case node {
      rw bracket,
      apply K'_prop,
    },
    case app : t‚ÇÅ t‚ÇÇ h‚ÇÅ h‚ÇÇ {
      rw bracket,
      transitivity,
      apply d'_prop,
      apply natree.pre.equiv.congr,
      assumption,
      assumption,
    },
    case ref {
      rw bracket,
      split_ifs,
      transitivity,
      apply I'_prop,
      rw h,
      apply K'_prop,
    },
  end

  theorem bracket_beta {x} {t u} : (bracket x t)‚ó¶u ‚âà subst' x u t := begin
    induction t,
    case node {
      rw [bracket, subst'],
      apply K'_prop,  
    },
    case app : t‚ÇÅ t‚ÇÇ h‚ÇÅ h‚ÇÇ {
      rw [bracket, subst', d'],
      transitivity,
      apply stem',
      apply natree.pre.equiv.congr,
      assumption,
      assumption,
    },
    case ref {
      rw [bracket, subst'],
      split_ifs,
      apply I'_prop,
      apply K'_prop,
    },
  end

  -----------------------------------------------------------------------------------

  --star abs similarly not liftable
  def star_abs : char ‚Üí ùïã' ‚Üí ùïã'
  | x ‚ñ¢ := K'‚ó¶‚ñ¢
  | x (#y) := if is_elem x (#y) then I' else K'‚ó¶(#y)
  | x (t‚ó¶(#y)) := if is_elem x (#y) ‚àß ¬¨ is_elem x t then t else (d' (star_abs x (#y)))‚ó¶(star_abs x t) --special case for eta-reduction
  | x (t‚ó¶u) := (d' (star_abs x u))‚ó¶(star_abs x t)

  notation `Œª* ` x `, ` t := star_abs x t

  lemma star_eta {x} {t} (h : ¬¨ is_elem x t) : (Œª* x, t‚ó¶#x) ‚âà t := begin
    rw star_abs,
    split_ifs,
    refl,
    exfalso,
    cases not_and_distrib.mp h_1,

    apply h_2,
    rw is_elem,

    apply h_2,
    assumption,
  end

  lemma star_unchanged {x} {t u} (h : ¬¨ is_elem x t) : (Œª* x, t)‚ó¶u ‚âà t := begin
    induction t,
    case node {
      rw star_abs,
      apply K'_prop,
    },
    case app : t‚ÇÅ t‚ÇÇ h‚ÇÅ h‚ÇÇ {
      induction t‚ÇÇ,
      case node {
        rw star_abs,
        transitivity,
        apply d'_prop,
        apply natree.pre.equiv.congr,

        apply h‚ÇÅ,
        intro p,
        apply h,
        rw is_elem,
        left,
        assumption,

        rw star_abs,
        apply K'_prop,
      },
      case app : t‚ÇÉ t‚ÇÑ h‚ÇÉ h‚ÇÑ {
        rw star_abs,
        transitivity,
        apply d'_prop,
        apply natree.pre.equiv.congr,

        apply h‚ÇÅ,
        intro p,
        apply h,
        rw is_elem,
        left,
        assumption,

        apply h‚ÇÇ,
        intro p,
        apply h,
        rw is_elem,
        right,
        assumption,
      },
      case ref {
        symmetry,
        transitivity,
        apply natree.pre.equiv.congr,

        symmetry,
        apply h‚ÇÅ,
        intro p,
        apply h,
        rw is_elem,
        left,
        assumption,

        symmetry,
        apply h‚ÇÇ,
        intro p,
        apply h,
        rw is_elem,
        right,
        assumption,

        symmetry,

        repeat {rw star_abs},
        split_ifs,

        exfalso,
        apply h,
        rw is_elem,
        right,
        assumption,

        exfalso,
        apply h_2,
        apply and.left,
        assumption,

        transitivity,
        apply d'_prop,
        refl,

        transitivity,
        apply d'_prop,
        refl,
      },
    },
    case ref {
      rw star_abs,
      split_ifs,
      apply K'_prop,
    },
  end

  theorem star_beta {x} {t u} : (Œª* x, t)‚ó¶u ‚âà subst' x u t := begin
    induction t,
    case node {
      rw [star_abs, subst'],
      apply K'_prop,
    },
    case ref {
      rw [star_abs, subst'],
      split_ifs,
      apply I'_prop,
      apply K'_prop,
    },
    case app : t‚ÇÅ t‚ÇÇ h‚ÇÅ h‚ÇÇ {
      rw subst',
      
      symmetry,
      transitivity,
      apply natree.pre.equiv.congr,
      symmetry,
      assumption,
      symmetry,
      assumption,
      symmetry,

      induction t‚ÇÇ,
      case node {
        rw star_abs,
        transitivity,
        apply d'_prop,
        refl,
      },
      case app {
        rw star_abs,
        transitivity,
        apply d'_prop,
        refl,
      },
      case ref {
        repeat {
          rw star_abs,
        },
        symmetry,
        split_ifs,

        apply natree.pre.equiv.congr,
        apply star_unchanged,
        exact h_1.2,
        apply I'_prop,

        symmetry,
        apply d'_prop,

        exfalso,
        apply h,
        apply and.left,
        assumption,

        symmetry,
        apply d'_prop,
      },
    },
  end

  theorem star_beta_q {x} {t} {u} : ‚ü¶Œª* x, t‚üß‚¨ùu = subst x u ‚ü¶t‚üß := begin
    have h‚ÇÅ := quotient.exists_rep u, cases h‚ÇÅ with u' h‚ÇÅ, rw ‚Üêh‚ÇÅ,
    rw ‚Üênatree.quot_dist_app,
    rw subst,
    dsimp,
    rw subst'1,
    dsimp,
    apply quotient.sound,
    apply star_beta,
  end

  -----------------------------------------------------------------------------------

  def œâ : ùïã := ‚ü¶Œª* 'z', Œª* 'f', #'f'‚ó¶(#'z'‚ó¶#'z'‚ó¶#'f')‚üß

  def Y (f) := œâ‚¨ùœâ‚¨ùf
  lemma Y_prop {f} : Y f = f‚¨ù(Y f) := begin
    rw Y,
    
    transitivity,
    apply congr, apply congr, refl,
    apply congr, apply congr, refl,
    rw œâ,
    refl, refl,

    transitivity,
    apply congr_arg2,
    rw star_beta_q,
    refl,

    --...

    -- have h‚ÇÅ := quotient.exists_rep œâ, cases h‚ÇÅ with œâ' h‚ÇÅ, rw ‚Üêh‚ÇÅ,
    -- have h‚ÇÇ := quotient.exists_rep f, cases h‚ÇÇ with f' h‚ÇÇ, rw ‚Üêh‚ÇÇ,
    -- repeat {rw ‚Üênatree.quot_dist_app},
    -- apply quotient.sound,

    -- transitivity,
    -- apply natree.pre.equiv.congr,
    -- apply star_beta,
    -- refl,

    -- transitivity,
    -- rw star_abs,
    -- rw subst',

    -- transitivity,
    -- apply natree.pre.equiv.congr_left,
    -- apply natree.pre.equiv.congr,

    -- show subst' 'z' œâ' (d' (Œª* 'f', #'z'‚ó¶#'z'‚ó¶#'f')) ‚âà d' (œâ'‚ó¶œâ'),
    -- refl,
    -- show subst' 'z' œâ' (Œª* 'f', #'f') ‚âà I',
    -- refl,

    -- transitivity,
    -- apply d'_prop,

    -- apply natree.pre.equiv.congr_left,
    -- apply I'_prop,
  end

  def wait (x y) := (d I)‚¨ù((d (K‚¨ùy))‚¨ù(K‚¨ùx))
  lemma wait_prop {x y z} : (wait x y)‚¨ùz = x‚¨ùy‚¨ùz := by simp [wait, d, I, K]

  def wait1 (x) := d (d (K‚¨ù(K‚¨ùx))‚¨ù(d ((d K)‚¨ù(K‚¨ù‚ñ≥))‚¨ù(K‚¨ù‚ñ≥)))‚¨ù(K‚¨ù(d (‚ñ≥‚¨ùK‚¨ùK)))
  lemma wait1_prop {x y z} : (wait1 x)‚¨ùy‚¨ùz = x‚¨ùy‚¨ùz := by simp [wait1, d, I, K]

  def self_apply := (d I)‚¨ùI
  lemma self_apply_prop {x} : self_apply‚¨ùx = x‚¨ùx := by simp [self_apply, d, I, K]

  def Z (f) := (wait1 self_apply)‚¨ù((d (wait1 self_apply)) ‚¨ù (K‚¨ùf))
  lemma Z_prop {f x} : (Z f)‚¨ùx = f‚¨ù(Z f)‚¨ùx := by simp [Z, wait1, self_apply, d, I, K]

  def swap (f) := (d K)‚¨ù(K‚¨ù(((d (K‚¨ùf))‚¨ùD)))
  lemma swap_prop {f x y} : (swap f)‚¨ùx‚¨ùy = f‚¨ùy‚¨ùx := by simp [swap, d, D, I, K]

  def Y‚ÇÇ (f) := Z (swap f)

  theorem fixpoint_function {f x} : (Y‚ÇÇ f)‚¨ùx = f‚¨ùx‚¨ù(Y‚ÇÇ f) := by simp [Y‚ÇÇ, Z, swap, wait1, self_apply, d, D, I, K]
  lemma Y‚ÇÇ_prop {f x} : (Y‚ÇÇ f)‚¨ùx = f‚¨ùx‚¨ù(Y‚ÇÇ f) := fixpoint_function

  def plus : ùïã := Y‚ÇÇ ‚ü¶Œª* 'm', Œª* 'p', ‚ñ¢‚ó¶#'m'‚ó¶I'‚ó¶(K'‚ó¶(Œª* 'x', Œª* 'n', K'‚ó¶(#'p'‚ó¶#'x'‚ó¶#'n')))‚üß

  def t_nil := ‚ñ≥
  def t_cons (h t) := ‚ñ≥‚¨ùh‚¨ùt

  def t_head := ‚ü¶Œª* 'x', (((‚ñ¢‚ó¶#'x')‚ó¶(K'‚ó¶I'))‚ó¶K')‚üß
  lemma head_prop {h t} : t_head‚¨ù(t_cons h t) = h := begin
    rw [t_head, t_cons],
    have h‚ÇÅ := quotient.exists_rep h, cases h‚ÇÅ with h' h‚ÇÅ, rw ‚Üêh‚ÇÅ,
    have h‚ÇÇ := quotient.exists_rep t, cases h‚ÇÇ with t' h‚ÇÇ, rw ‚Üêh‚ÇÇ,
    rw natree.node,
    repeat {rw ‚Üêquot_dist_app},
    apply quotient.sound,
    transitivity,
    apply star_beta,
    repeat {rw subst'},
    show (‚ñ¢‚ó¶(‚ñ¢‚ó¶h'‚ó¶t')‚ó¶(K'‚ó¶I')‚ó¶K') ‚âà h',
    transitivity,
    apply natree.pre.equiv.lift_reduces_to,
    apply natree.pre.reduces.fork,
    apply K'_prop,
  end

  def t_tail := ‚ü¶Œª* 'x', (((‚ñ¢‚ó¶#'x')‚ó¶(K'‚ó¶I'))‚ó¶(K'‚ó¶I'))‚üß
  lemma tail_prop {h t} : t_tail‚¨ù(t_cons h t) = t := begin
    rw [t_tail, t_cons],
    have h‚ÇÅ := quotient.exists_rep h, cases h‚ÇÅ with h' h‚ÇÅ, rw ‚Üêh‚ÇÅ,
    have h‚ÇÇ := quotient.exists_rep t, cases h‚ÇÇ with t' h‚ÇÇ, rw ‚Üêh‚ÇÇ,
    rw natree.node,
    repeat {rw ‚Üêquot_dist_app},
    apply quotient.sound,
    transitivity,
    apply star_beta,
    repeat {rw subst'},
    transitivity,
    apply natree.pre.equiv.congr,
    apply natree.pre.equiv.congr,
    apply natree.pre.equiv.congr,
    refl,
    show subst' 'x' (‚ñ¢‚ó¶h'‚ó¶t') (#'x') ‚âà (‚ñ¢‚ó¶h'‚ó¶t'),
    refl,
    show subst' 'x' (‚ñ¢‚ó¶h'‚ó¶t') K'‚ó¶subst' 'x' (‚ñ¢‚ó¶h'‚ó¶t') I' ‚âà K'‚ó¶I',
    refl,
    show subst' 'x' (‚ñ¢‚ó¶h'‚ó¶t') K'‚ó¶subst' 'x' (‚ñ¢‚ó¶h'‚ó¶t') I' ‚âà K'‚ó¶I',
    refl,
    transitivity,
    apply natree.pre.equiv.lift_reduces_to,
    apply natree.pre.reduces.fork,
    transitivity,
    apply natree.pre.equiv.congr_left,
    apply K'_prop,
    apply I'_prop,
  end

  def t_nil' := ‚ñ¢
  def t_cons' (h t) := ‚ñ¢‚ó¶h‚ó¶t

  def list_map_swap := ‚ü¶(Œª* 'x', ‚ñ¢‚ó¶#'x'‚ó¶(K'‚ó¶(K'‚ó¶t_nil')))‚ó¶(Œª* 'h', Œª* 't', Œª* 'm', Œª* 'f', t_cons' (#'f'‚ó¶#'h') (#'m'‚ó¶#'f'‚ó¶#'t'))‚üß
  def list_map := swap (Y‚ÇÇ list_map_swap)
  lemma list_map_prop_nil {f} : list_map‚¨ùf‚¨ùt_nil = t_nil := begin
    --??? (we need to stop having to delve under the quotient whenever something is defined using star_abs)
    --if a ùïã' has no free variables, it is a combinator, and can be turned into an expression with no variables at all, which can then be simped
    rw [list_map, list_map_swap],

  end
  lemma list_map_prop_cons {f h t} : list_map‚¨ùf‚¨ù(t_cons h t) = t_cons (f‚¨ùh) (list_map‚¨ùf‚¨ùt) := begin
    --???
    sorry
  end

end chapter4