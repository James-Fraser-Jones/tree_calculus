import tactic

@[derive decidable_eq]
inductive pre 
| node : pre
| app : pre ‚Üí pre ‚Üí pre

notation `ùïã'` := pre
notation `‚ñ¢` := pre.node
infixl `‚ó¶`:60 := pre.app

inductive reduces : ùïã' ‚Üí ùïã' ‚Üí Type
| kernel         (y) {z} : reduces (‚ñ¢‚ó¶   ‚ñ¢   ‚ó¶y‚ó¶z) y
|   stem     (x) (y) (z) : reduces (‚ñ¢‚ó¶ (‚ñ¢‚ó¶x) ‚ó¶y‚ó¶z) (y‚ó¶z‚ó¶(x‚ó¶z))
|   fork (w) (x) {y} (z) : reduces (‚ñ¢‚ó¶(‚ñ¢‚ó¶w‚ó¶x)‚ó¶y‚ó¶z) (z‚ó¶w‚ó¶x)
|   left {a‚ÇÅ a‚ÇÇ b‚ÇÅ} (h : reduces a‚ÇÅ b‚ÇÅ) : reduces (a‚ÇÅ ‚ó¶ a‚ÇÇ) (b‚ÇÅ ‚ó¶ a‚ÇÇ)
|  right {a‚ÇÅ a‚ÇÇ b‚ÇÇ} (h : reduces a‚ÇÇ b‚ÇÇ) : reduces (a‚ÇÅ ‚ó¶ a‚ÇÇ) (a‚ÇÅ ‚ó¶ b‚ÇÇ)
infixr ` ‚Ü¶ `:60 := reduces

def reduceable (t‚ÇÅ t‚ÇÇ) := nonempty (t‚ÇÅ ‚Ü¶ t‚ÇÇ)
infixr ` ‚á¢ `:60 := reduceable

def reduce_kernel : ‚àÄ (t‚ÇÅ t‚ÇÇ), option (t‚ÇÅ ‚Ü¶ t‚ÇÇ)
| (‚ñ¢‚ó¶‚ñ¢‚ó¶y‚ó¶z) y‚ÇÇ := if h : y = y‚ÇÇ then some (by {rw ‚Üêh, apply reduces.kernel}) else none
| _ _ := none

#check id_rhs
#check @dite --dite : Œ† {Œ± : Sort u_1} (c : Prop) [h : decidable c], (c ‚Üí Œ±) ‚Üí (¬¨c ‚Üí Œ±) ‚Üí Œ±
#check @ite  -- ite : Œ† {Œ± : Sort u_1} (c : Prop) [h : decidable c],      Œ±  ‚Üí       Œ±  ‚Üí Œ±
#print reduce_kernel._main

example {n} : nat.zero ‚â† nat.succ n := begin
  intro h, 
  injection h,
end

example {n} : nat.succ n ‚â† nat.zero := begin
  intro h, 
  injection h,
end

example {m n} : nat.succ n = nat.succ m ‚Üí n = m := begin
  intro h,
  injection h,
end

#check @bool.ff.inj

lemma kernel_complete (t‚ÇÅ t‚ÇÇ) : (‚àÉ r, reduce_kernel t‚ÇÅ t‚ÇÇ = some r) ‚Üî ‚àÉ y z, (‚ñ¢‚ó¶‚ñ¢‚ó¶y‚ó¶z) ‚Ü¶ y ‚àß t‚ÇÅ = (‚ñ¢‚ó¶‚ñ¢‚ó¶y‚ó¶z) ‚àß t‚ÇÇ = y :=

def list_reductions (t‚ÇÅ t‚ÇÇ) : list (t‚ÇÅ ‚Ü¶ t‚ÇÇ) := sorry

--if I can define this I can define anything
--still need to figure out how "no confusion" works tbf
def reductions (t‚ÇÅ t‚ÇÇ) : fintype (t‚ÇÅ ‚Ü¶ t‚ÇÇ) := begin
  split,
    show finset _,
    split,
      show multiset _,
      apply quotient.mk,

      --produce a list of reductions
      --show that the multiset (quotient of this list) has no duplicates
      --prove that every possible reduction is in this multiset
end

example {Œ±} (l : list Œ±) : multiset Œ± := by refine multiset.zero

#check @reduces.rec_on

#print reduces.no_confusion
#print pre.app.inj

/-
reduces.cases_on:

This function takes a reduction 'n' from an arbitrary tree 'a' to an arbitrary tree 'b' and uses it
to produce a dependent Proposition (proving something about reduction) or Type (some kind of data).

{motive : Œ† (a b : ùïã'), a ‚Ü¶ b ‚Üí Sort u}
{a b : ùïã'} 
(n : a ‚Ü¶ b)

If 'a' reduces to 'b' via the kernel rule, show P
(Œ† (y : ùïã') {z : ùïã'}, motive (‚ñ¢‚ó¶‚ñ¢‚ó¶y‚ó¶z) y (reduces.kernel y))

If 'a' reduces to 'b' via the stem rule, show P 
(Œ† (x y z : ùïã'), motive (‚ñ¢‚ó¶(‚ñ¢‚ó¶x)‚ó¶y‚ó¶z) (y‚ó¶z‚ó¶(x‚ó¶z)) (reduces.stem x y z))

If 'a' reduces to 'b' via the fork rule, show P
(Œ† (w x : ùïã') {y : ùïã'} (z : ùïã'), motive (‚ñ¢‚ó¶(‚ñ¢‚ó¶w‚ó¶x)‚ó¶y‚ó¶z) (z‚ó¶w‚ó¶x) (reduces.fork w x z))

If 'a' reduces to 'b' via the left rule, show P
(Œ† {a‚ÇÅ a‚ÇÇ b‚ÇÅ : ùïã'} (h : a‚ÇÅ ‚Ü¶ b‚ÇÅ), motive (a‚ÇÅ‚ó¶a‚ÇÇ) (b‚ÇÅ‚ó¶a‚ÇÇ) h.left)

If 'a' reduces to 'b' via the right rule, show P
(Œ† {a‚ÇÅ a‚ÇÇ b‚ÇÇ : ùïã'} (h : a‚ÇÇ ‚Ü¶ b‚ÇÇ), motive (a‚ÇÅ‚ó¶a‚ÇÇ) (a‚ÇÅ‚ó¶b‚ÇÇ) h.right)

Hence P is true
motive a b n

--------------------------------------------------------------------------
reduces.rec_on:

This function differs only in the case of the recursive left/right rules which build a reduction
'a ‚Ü¶ b' from another reduction 'x ‚Ü¶ y'

(Œ† {a‚ÇÅ a‚ÇÇ b‚ÇÅ : ùïã'} (h : a‚ÇÅ ‚Ü¶ b‚ÇÅ), motive a‚ÇÅ b‚ÇÅ h ‚Üí motive (a‚ÇÅ‚ó¶a‚ÇÇ) (b‚ÇÅ‚ó¶a‚ÇÇ) h.left)
(Œ† {a‚ÇÅ a‚ÇÇ b‚ÇÇ : ùïã'} (h : a‚ÇÇ ‚Ü¶ b‚ÇÇ), motive a‚ÇÇ b‚ÇÇ h ‚Üí motive (a‚ÇÅ‚ó¶a‚ÇÇ) (a‚ÇÅ‚ó¶b‚ÇÇ) h.right)

Previously we had:
Using (h : a‚ÇÅ ‚Ü¶ b‚ÇÅ), show that P holds of (a‚ÇÅ‚ó¶a‚ÇÇ) ‚Ü¶ (b‚ÇÅ‚ó¶a‚ÇÇ).
Now we have:
Using (h : a‚ÇÅ ‚Ü¶ b‚ÇÅ), and that P holds of a‚ÇÅ ‚Ü¶ b‚ÇÅ, show that P holds of (a‚ÇÅ‚ó¶a‚ÇÇ) ‚Ü¶ (b‚ÇÅ‚ó¶a‚ÇÇ).
-/

---------------------------------------------------------------------

inductive and' : Prop ‚Üí Prop ‚Üí Prop
| mk {p q} (h‚ÇÅ : p) (h‚ÇÇ : q) : and' p q

def left {p q} (h : and' p q) : p := h.rec_on (Œª _ _ h‚ÇÅ _, h‚ÇÅ)

inductive weekday : Type
| sunday : weekday
| monday : weekday
| tuesday : weekday
| wednesday : weekday
| thursday : weekday
| friday : weekday
| saturday : weekday

namespace weekday
def next (d : weekday) : weekday :=
weekday.cases_on d monday tuesday wednesday thursday friday
  saturday sunday

def previous (d : weekday) : weekday :=
weekday.cases_on d saturday sunday monday tuesday wednesday
  thursday friday

#reduce next (next tuesday)
#reduce next (previous tuesday)

example : next (previous tuesday) = tuesday := rfl

theorem next_previous (d: weekday) :
  next (previous d) = d :=
weekday.cases_on d rfl rfl rfl rfl rfl rfl rfl

theorem next_previous' (d: weekday) : next (previous d) = d := by cases d; refl

end weekday

#check @false.rec_on
#check @false.elim

#check @true.rec_on

#check @bool.rec_on
#check @bool.cases_on

def band' (b1 b2 : bool) : bool := bool.cases_on b1 ff b2
#reduce band' tt tt
#reduce band' tt ff
#reduce band' ff tt
#reduce band' ff ff

def bor' (b1 b2 : bool) : bool := bool.cases_on b1 b2 tt
#reduce bor' tt tt
#reduce bor' tt ff
#reduce bor' ff tt
#reduce bor' ff ff

def bnot' (b1 : bool) : bool := bool.cases_on b1 tt ff
#reduce bnot' tt
#reduce bnot' ff

universes u v
inductive prod' (Œ± : Type*) (Œ≤ : Type*) --what?? :s
| mk : Œ± ‚Üí Œ≤ ‚Üí prod'

#check @prod'.mk

def fst {Œ± Œ≤ : Type*} (p : Œ± √ó Œ≤) : Œ± := prod.rec_on p (Œª a _, a)

#check @prod.rec_on

inductive sum' (Œ± : Type u) (Œ≤ : Type v)
| inl {} (a : Œ±) : sum'
| inr {} (b : Œ≤) : sum'

#check @sum'.inl
#check @sum'.inr

inductive option' (Œ± : Type*)
| none {} : option'
| some    : Œ± ‚Üí option'

#check @option'.none --option'.none : Œ† {Œ± : Type u_1}, option' Œ±

#check @nat.cases_on 
--Œ† {motive : ‚Ñï ‚Üí Sort u_1} (n : ‚Ñï), motive 0 ‚Üí (Œ† (n : ‚Ñï), motive n.succ) ‚Üí motive n
--If our motive maps into Prop, we have: "If p when n = 0, and p when n = n'+1 then p for all n"
#check @nat.rec_on
--Œ† {motive : ‚Ñï ‚Üí Sort u_1} (n : ‚Ñï), motive 0 ‚Üí (Œ† (n : ‚Ñï), motive n ‚Üí motive n.succ) ‚Üí motive n
--This time it's inductive reasoning:    "If p when n = 0, and (if p when n = n' then p when n = n'+1) then p for all n"

def add' (m n : nat) : nat := nat.rec_on m n (Œª k kaddn, nat.succ kaddn)

inductive foo : Type
| bar1 : ‚Ñï ‚Üí ‚Ñï ‚Üí foo
| bar2 : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï ‚Üí foo

open foo

def silly (x : foo) : ‚Ñï :=
begin
  cases x,
    case bar1 : a b
      { exact b },
    case bar2 : c d e
      { exact e }
end

open nat
variable p : ‚Ñï ‚Üí Prop

example (hz : p 0) (hs : ‚àÄ n, p (succ n)) (m k : ‚Ñï) :
  p (m + 3 * k) :=
begin
  cases (m + 3 * k),
  { exact hz },  -- goal is p 0
  apply hs       -- goal is a : ‚Ñï ‚ä¢ p (succ a)
end

lemma injection_example (h : 7 = 4) : false := begin
  injection h with h',
  injection h' with h'',
  injection h'' with h''',
  injection h''' with h'''',
  injection h'''' with h''''',
end

#print injection_example
#print nat.succ.inj_arrow

inductive eq' {Œ± : Sort u} (a : Œ±) : Œ± ‚Üí Prop
| refl [] : eq' a

#check @eq'
#check @eq'.refl --eq'.refl : ‚àÄ {Œ± : Sort u_1} (a : Œ±), eq' a a

inductive bool'
| tt' : bool' 
| ff' : bool'
open bool'

def bool'_equal (b‚ÇÅ b‚ÇÇ : bool') : Prop :=
bool'.cases_on b‚ÇÅ 
( bool'.cases_on b‚ÇÇ
  true
  false --explicitly returns false when the two values aren't equal
)
( bool'.cases_on b‚ÇÇ
  false
  true
)

def bool_equal (b‚ÇÅ b‚ÇÇ : bool) : Prop := begin
  cases b‚ÇÅ,
    cases b‚ÇÇ,
      exact true,
    exact false,
  cases b‚ÇÇ,
    exact false,
  exact true
end

lemma bool_no_confusion {b‚ÇÅ b‚ÇÇ} : (b‚ÇÅ = b‚ÇÇ) ‚Üí bool_equal b‚ÇÅ b‚ÇÇ := begin
  intro h,
  rw h,
  cases b‚ÇÇ,
    trivial,
  trivial,
end

theorem true_not_eq_false : tt ‚â† ff := bool_no_confusion

theorem true_not_eq_false' : tt ‚â† ff := by {intro h, cases h}

theorem true_not_eq_false'' : tt ‚â† ff :=
id (Œª (h : tt = ff), h.cases_on (Œª (H_1 : ff = tt), bool.no_confusion H_1) (eq.refl ff) (heq.refl h))

#print bool.no_confusion_type
#reduce bool.no_confusion_type false tt tt
#reduce bool.no_confusion_type false tt ff
#reduce bool.no_confusion_type false ff tt
#reduce bool.no_confusion_type false tt tt
#reduce bool.no_confusion_type (tt = ff) tt tt
#reduce bool.no_confusion_type (tt = ff) tt ff

#check @bool.no_confusion

#reduce bool'_equal tt' tt'
#reduce bool'_equal tt' ff'
#reduce bool'_equal ff' tt'
#reduce bool'_equal ff' ff'

#print nat.no_confusion_type
#reduce nat.no_confusion_type false
#print bool.rec

def bool'_no_confusion {b‚ÇÅ b‚ÇÇ : bool'} : (b‚ÇÅ = b‚ÇÇ) ‚Üí bool'_equal b‚ÇÅ b‚ÇÇ :=
Œª h, 
eq.cases_on h 
(bool'.cases_on b‚ÇÅ trivial trivial) --bool'_equal b‚ÇÅ b‚ÇÅ
--produces bool'_equal b‚ÇÅ b‚ÇÇ

--our no_confusion function is actually logically equivalent to equality
def bool'_no_confusion' {b‚ÇÅ b‚ÇÇ : bool'} : (b‚ÇÅ = b‚ÇÇ) ‚Üî bool'_equal b‚ÇÅ b‚ÇÇ := begin
  split,
    intro h,
    rw h,
    rw bool'_equal,
    cases b‚ÇÇ,
      trivial,
    trivial,
  intro h,
  cases b‚ÇÅ,
    cases b‚ÇÇ,
      refl,
    exfalso,
    assumption,
  cases b‚ÇÇ,
    exfalso,
    assumption,
  refl,
end

--b‚ÇÅ = b‚ÇÇ implies that trivial is a proof of bool'_equal b‚ÇÅ b‚ÇÇ since bool'_equal b‚ÇÅ b‚ÇÇ reduces to true
--don't forget that (tt' ‚â† ff') := (tt' = ff' ‚Üí false)
theorem unconfused : tt' ‚â† ff' := bool'_no_confusion

#print bool'.no_confusion_type

-------------------------------------------------------------------------------

inductive xnat
| zero : xnat
| succ : xnat ‚Üí xnat 
open xnat

def xnat_equal' (n‚ÇÅ n‚ÇÇ : xnat) : Prop :=
@xnat.rec_on (Œª x, Prop) n‚ÇÅ (
  --n‚ÇÅ = 0
  @xnat.rec_on (Œª x, Prop) n‚ÇÇ
    --n‚ÇÇ = 0
    true
    --n‚ÇÇ = succ n‚ÇÇ'
    (Œª n‚ÇÇ' p‚ÇÇ, false)
)(
  --n‚ÇÅ = succ n‚ÇÅ'
  Œª n‚ÇÅ' p‚ÇÅ,
  @xnat.rec_on (Œª x, Prop) n‚ÇÇ
    --n‚ÇÇ = 0
    false
    --n‚ÇÇ = succ n‚ÇÇ'
    (Œª n‚ÇÇ' p‚ÇÇ, _)
)

--unwrap outer layer only, no recursion necessary
def xnat_equal (n‚ÇÅ n‚ÇÇ : xnat) : Prop := begin
  cases n‚ÇÅ with n‚ÇÅ',
    cases n‚ÇÇ with n‚ÇÇ',
      exact true,
    exact false,
  cases n‚ÇÇ with n‚ÇÇ',
    exact false,
  exact n‚ÇÅ' = n‚ÇÇ' --no recursion necessary here
end

def xnat_no_confusion {s t : xnat} (h : s = t) : xnat_equal s t := begin
  rw h,
  cases t,
    trivial,
  show t = t,
  refl,
end

#print xnat_no_confusion

--how do these theorems work?
theorem wat (n : xnat) : succ n ‚â† xnat.zero := xnat_no_confusion --disjoint ranges
theorem wat' (n : xnat) : xnat.zero ‚â† succ n := xnat_no_confusion
theorem succ_injective (m n : xnat) : succ m = succ n ‚Üí m = n := xnat_no_confusion --injective

def bool_equal' : bool ‚Üí bool ‚Üí Prop
| tt tt := true
| tt ff := false
| ff tt := false
| ff ff := true

section
  example (m n : ‚Ñï) : ‚àÉ (p : ‚Ñï), m + n = p := begin
    induction h : m generalizing m,
    case nat.succ : m' h‚ÇÇ {
      --need to use "‚àÉ (p : ‚Ñï), m' + n = p" here but can't
      --why is "m = m' ‚Üí" added to the beginning of h‚ÇÇ?
    }
  end
end
