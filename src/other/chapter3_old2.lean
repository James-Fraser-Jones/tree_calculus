import tactic natree.natree

namespace chapter3

  --equational "axioms"
  @[simp] def kernel {y z} : ‚ñ≥‚¨ù‚ñ≥‚¨ùy‚¨ùz = y := natree.kernel
  @[simp] def stem {x y z} : ‚ñ≥‚¨ù(‚ñ≥‚¨ùx)‚¨ùy‚¨ùz = y‚¨ùz‚¨ù(x‚¨ùz) := natree.stem
  @[simp] def fork {w x y z} : ‚ñ≥‚¨ù(‚ñ≥‚¨ùw‚¨ùx)‚¨ùy‚¨ùz = z‚¨ùw‚¨ùx := natree.fork

  --K combinator (similar to Kernel rule)
  def derive_K : {K : ùïã // ‚àÄ x y, K‚¨ùx‚¨ùy = x} := begin
    --metavariable ?m_1 introduced for K
    split,
    intros x y, 

    --use kernel rule
    symmetry,
    transitivity,
    symmetry,
    apply kernel,
    exact y,
    symmetry,

    --remove trailing ys
    apply congr,
    apply congr,
    refl,

    --remove trailing xs
    apply congr,
    apply congr,
    refl,

    --?m_1 = ‚ñ≥‚¨ù‚ñ≥
    
    --finish proof
    repeat {refl},
  end

  def K : ùïã := ‚ñ≥‚¨ù‚ñ≥

  --I combinator (Identity combinator)
  def derive_I : {I : ùïã // ‚àÄ x, I‚¨ùx = x} := begin
    --metavariable ?m_1 introduced for I
    split,
    intro x, 

    --use kernel rule
    symmetry,
    transitivity,
    symmetry,
    apply kernel,
    exact ‚ñ≥‚¨ùx,
    symmetry,

    --use stem rule
    symmetry,
    transitivity,
    symmetry,
    apply stem,
    symmetry,

    --remove trailing xs
    apply congr,
    apply congr,
    refl,

    --?m_1 = ‚ñ≥‚¨ù(‚ñ≥‚¨ù‚ñ≥)‚¨ù(‚ñ≥‚¨ù‚ñ≥)

    --finish proof
    repeat {refl},
  end

  def I : ùïã := ‚ñ≥‚¨ù(‚ñ≥‚¨ù‚ñ≥)‚¨ù(‚ñ≥‚¨ù‚ñ≥)

  --D combinator (flipped S combinator, similar to Stem rule)
  def derive_D : {D : ùïã // ‚àÄ x y z, D‚¨ùx‚¨ùy‚¨ùz = y‚¨ùz‚¨ù(x‚¨ùz)} := begin
    --metavariable ?m_1 introduced for D
    split,
    intros x y z,

    --use stem rule
    symmetry,
    transitivity,
    symmetry,
    apply stem,
    symmetry,

    --remove trailing zs
    apply congr,
    apply congr,
    refl,

    --remove trailing ys
    apply congr,
    apply congr,
    refl,

    --replace ‚ñ≥ with K‚¨ù‚ñ≥‚¨ùx
    symmetry,
    transitivity,
    apply congr,
    apply congr,
    refl,
    symmetry,
    show K‚¨ù‚ñ≥‚¨ùx = ‚ñ≥,
    apply derive_K.property,
    refl,
    symmetry,

    --use stem rule
    symmetry,
    transitivity,
    symmetry,
    apply stem,
    symmetry,

    --remove trailing xs
    apply congr,
    apply congr,
    refl,

    --unfold definition of K
    symmetry,
    transitivity,
    apply congr,
    refl,
    apply congr,
    apply congr,
    refl,
    show K = ‚ñ≥‚¨ù‚ñ≥, 
    refl,
    refl,
    symmetry,

    --?m_1 = ‚ñ≥‚¨ù(‚ñ≥‚¨ù‚ñ≥)‚¨ù(‚ñ≥‚¨ù‚ñ≥‚¨ù‚ñ≥)

    --finish proof
    repeat {refl},
  end

  def D : ùïã := ‚ñ≥‚¨ù(‚ñ≥‚¨ù‚ñ≥)‚¨ù(‚ñ≥‚¨ù‚ñ≥‚¨ù‚ñ≥)

  --d function (shorter version of D)
  def d (x : ùïã) : ùïã := ‚ñ≥‚¨ù(‚ñ≥‚¨ùx)
  lemma d_equiv_D {x} : D‚¨ùx = d x := by simp [d, D]

  --iterated application
  def iterate : ‚Ñï ‚Üí ùïã ‚Üí ùïã ‚Üí ùïã
  | 0 a b := b
  | (n+1) a b := a‚¨ù(iterate n a b)
  notation a ^ n ‚¨ù b := iterate n a b

  --derivation of the fundamental queries
  def derive_q {a b c e} : {q : ùïã // ‚àÄ x, q‚¨ùx = ‚ñ≥‚¨ùx‚¨ùa‚¨ùb‚¨ùc‚¨ùe} := begin
    --metavariable ?m_1 introduced for q
    split,
    intro x,

    --replace ‚ñ≥‚¨ùx‚¨ùa with D‚¨ù(K‚¨ùa)‚¨ù‚ñ≥‚¨ùx (utilizing Stem rule)
    symmetry,
    transitivity,
    apply congr,
    apply congr,
    refl,
    apply congr,
    apply congr,
    refl,
    apply congr,
    apply congr,
    refl,
    show ‚ñ≥‚¨ùx‚¨ùa = D‚¨ù(K‚¨ùa)‚¨ù‚ñ≥‚¨ùx,
    symmetry,
    have h : D = derive_D.val := rfl,
    rw h,
    transitivity,
    apply derive_D.property,
    apply congr,
    refl,
    have h‚ÇÇ : K = derive_K.val := rfl,
    rw h‚ÇÇ,
    apply derive_K.property,
    refl,
    refl,
    refl,
    symmetry,

    --replace (D‚¨ù(K‚¨ùa)‚¨ù‚ñ≥)‚¨ùx‚¨ùb with D‚¨ù(K‚¨ùb)‚¨ù(D‚¨ù(K‚¨ùa)‚¨ù‚ñ≥)‚¨ùx (utilizing Stem rule)
    symmetry,
    transitivity,
    apply congr,
    apply congr,
    refl,
    apply congr,
    apply congr,
    refl,
    show (D‚¨ù(K‚¨ùa)‚¨ù‚ñ≥)‚¨ùx‚¨ùb = D‚¨ù(K‚¨ùb)‚¨ù(D‚¨ù(K‚¨ùa)‚¨ù‚ñ≥)‚¨ùx,
    symmetry,
    have h : D = derive_D.val := rfl,
    rw h,
    transitivity,
    apply derive_D.property,
    apply congr,
    refl,
    have h‚ÇÇ : K = derive_K.val := rfl,
    rw h‚ÇÇ,
    apply derive_K.property,
    refl,
    refl,
    symmetry,

    --replace D‚¨ù(K‚¨ùb)‚¨ù(D‚¨ù(K‚¨ùa)‚¨ù‚ñ≥)‚¨ùx‚¨ùc with D‚¨ù(K‚¨ùc)‚¨ù(D‚¨ù(K‚¨ùb)‚¨ù(D‚¨ù(K‚¨ùa)‚¨ù‚ñ≥))‚¨ùx (utilizing Stem rule)
    symmetry,
    transitivity,
    apply congr,
    apply congr,
    refl,
    show D‚¨ù(K‚¨ùb)‚¨ù(D‚¨ù(K‚¨ùa)‚¨ù‚ñ≥)‚¨ùx‚¨ùc = D‚¨ù(K‚¨ùc)‚¨ù(D‚¨ù(K‚¨ùb)‚¨ù(D‚¨ù(K‚¨ùa)‚¨ù‚ñ≥))‚¨ùx,
    symmetry,
    have h : D = derive_D.val := rfl,
    rw h,
    transitivity,
    apply derive_D.property,
    apply congr,
    refl,
    have h‚ÇÇ : K = derive_K.val := rfl,
    rw h‚ÇÇ,
    apply derive_K.property,
    refl,
    symmetry,

    --replace D‚¨ù(K‚¨ùc)‚¨ù(D‚¨ù(K‚¨ùb)‚¨ù(D‚¨ù(K‚¨ùa)‚¨ù‚ñ≥))‚¨ùx‚¨ùd with D‚¨ù(K‚¨ùd)‚¨ù(D‚¨ù(K‚¨ùc)‚¨ù(D‚¨ù(K‚¨ùb)‚¨ù(D‚¨ù(K‚¨ùa)‚¨ù‚ñ≥)))‚¨ùx (utilizing Stem rule)
    symmetry,
    transitivity,
    show D‚¨ù(K‚¨ùc)‚¨ù(D‚¨ù(K‚¨ùb)‚¨ù(D‚¨ù(K‚¨ùa)‚¨ù‚ñ≥))‚¨ùx‚¨ùe = D‚¨ù(K‚¨ùe)‚¨ù(D‚¨ù(K‚¨ùc)‚¨ù(D‚¨ù(K‚¨ùb)‚¨ù(D‚¨ù(K‚¨ùa)‚¨ù‚ñ≥)))‚¨ùx,
    symmetry,
    have h : D = derive_D.val := rfl,
    rw h,
    transitivity,
    apply derive_D.property,
    apply congr,
    refl,
    have h‚ÇÇ : K = derive_K.val := rfl,
    rw h‚ÇÇ,
    apply derive_K.property,
    symmetry,

    --remove xs
    apply congr,
    apply congr,
    refl,
    
    --replace with ds
    symmetry,
    repeat {
      transitivity,
      rw d_equiv_D,
    },
    symmetry,

    --?m_1 = d (K‚¨ùe)‚¨ù(d (K‚¨ùc)‚¨ù(d (K‚¨ùb)‚¨ù(d (K‚¨ùa)‚¨ù‚ñ≥)))

    --finish proof
    repeat {refl},
  end

  def bool_to_natree : bool ‚Üí ùïã
  | tt := K
  | ff := K‚¨ùI

  structure solution_property (f g h k : ùïã) (is0 is1 is2 : bool) : Prop :=
  (eq0 : ‚ñ≥‚¨ù‚ñ≥‚¨ùf‚¨ùg‚¨ùh‚¨ùk = bool_to_natree is0)
  (eq1 : ‚àÄ x, ‚ñ≥‚¨ù(‚ñ≥‚¨ùx)‚¨ùf‚¨ùg‚¨ùh‚¨ùk = bool_to_natree is1)
  (eq2 : ‚àÄ x y, ‚ñ≥‚¨ù(‚ñ≥‚¨ùx‚¨ùy)‚¨ùf‚¨ùg‚¨ùh‚¨ùk = bool_to_natree is2)

  lemma k2 {a b c} : (K^2‚¨ùa)‚¨ùb‚¨ùc = a := begin
    --rewrite in terms of derive_K.val
    repeat {rw iterate},
    have h : K = derive_K.val := rfl,
    rw h,

    --remove c
    transitivity,
    apply congr,
    apply congr,
    refl,

    --simplify using K-rule
    apply derive_K.property,
    refl,

    --simplify using K-rule again
    apply derive_K.property,
  end

  lemma k4 {a b c d e} : (K^4‚¨ùa)‚¨ùb‚¨ùc‚¨ùd‚¨ùe = a := begin
    --rewrite in terms of derive_K.val
    repeat {rw iterate},
    have h : K = derive_K.val := rfl,
    rw h,

    --remove c, d and e
    transitivity,
    apply congr,
    apply congr,
    refl,
    apply congr,
    apply congr,
    refl,
    apply congr,
    apply congr,
    refl,

    --simplify using K-rule
    apply derive_K.property,
    refl,
    refl,
    refl,

    --remove d and e
    transitivity,
    apply congr,
    apply congr,
    refl,
    apply congr,
    apply congr,
    refl,

    --simplify using K-rule
    apply derive_K.property,
    refl,
    refl,

    --remove e
    transitivity,
    apply congr,
    apply congr,
    refl,

    --simplify using K-rule
    apply derive_K.property,
    refl,

    --simplify using K-rule again
    apply derive_K.property,
  end

  lemma kI {a b} : K‚¨ùI‚¨ùa‚¨ùb = b := begin
    transitivity,
    apply congr,
    apply congr,
    refl,
    have h : K = derive_K.val := rfl,
    show K‚¨ùI‚¨ùa = I,
    rw h,
    apply derive_K.property,
    refl,
    have h‚ÇÇ : I = derive_I.val := rfl,
    rw h‚ÇÇ,
    apply derive_I.property,
  end

  def prove_query {is0 is1 is2} : Œ£' f g h k, solution_property f g h k is0 is1 is2 := begin
    --apply naive solution for f (K^2‚¨ù(bool_to_natree is0))
    split,
    show ùïã,
    exact K^2‚¨ù(bool_to_natree is0), 

    --apply naive solution for g (K^4‚¨ù(bool_to_natree is2))
    split,
    show ùïã,
    exact K^4‚¨ù(bool_to_natree is2),

    --apply derived solution for h (bool_to_natree is1)
    split,
    show ùïã,
    exact bool_to_natree is1,

    --apply derived solution for k (bool_to_natree is1)
    split,
    show ùïã,
    exact bool_to_natree is1,

    split,

    ---------------------------------------------
    
    --remove h and k
    transitivity,
    apply congr,
    apply congr,
    refl,
    apply congr,
    apply congr,
    refl,

    --use kernel rule
    apply kernel,
    refl,
    refl,

    --use k2
    apply k2,

    ---------------------------------------------

    intro x,

    --remove h and k
    transitivity,
    apply congr,
    apply congr,
    refl,
    apply congr,
    apply congr,
    refl,

    --use stem rule and k2
    transitivity,
    apply stem,
    apply k2,
    refl,
    refl,

    --split on cases
    cases is0,

    --case false
    rw bool_to_natree,
    apply kI,

    --case true
    rw bool_to_natree,
    have h : K = derive_K.val := rfl,
    rw h,
    apply derive_K.property,

    ---------------------------------------------

    intros x y,

    --remove h and k
    transitivity,
    apply congr,
    apply congr,
    refl,
    apply congr,
    apply congr,
    refl,

    --use fork rule and k4
    transitivity,
    apply fork,
    refl,
    refl,
    refl,
    apply k4,
  end

  --D in terms of K and S
  def S : ùïã := (d (K‚¨ùD))‚¨ù((d K)‚¨ù(K‚¨ùD))
  lemma S_prop {x y z} : S‚¨ùx‚¨ùy‚¨ùz = x‚¨ùz‚¨ù(y‚¨ùz) := by simp [S, d, D, K]
  
  def D' : ùïã := S‚¨ù(K‚¨ù(S‚¨ùS))‚¨ùK
  example {x y z} : D'‚¨ùx‚¨ùy‚¨ùz = y‚¨ùz‚¨ù(x‚¨ùz) := by simp [D', S, d, D, K]

  --Defining fst and snd
  def fst : ùïã := S‚¨ù(K‚¨ù(‚ñ≥‚¨ù(K‚¨ùK)‚¨ù‚ñ≥))‚¨ù‚ñ≥
  example {x y} : fst‚¨ù(‚ñ≥‚¨ùx‚¨ùy) = x := by simp [fst, S, d, D, K]

  def snd : ùïã := S‚¨ù(K‚¨ù(‚ñ≥‚¨ù(K‚¨ù(K‚¨ùI))‚¨ù‚ñ≥))‚¨ù‚ñ≥
  example {x y} : snd‚¨ù(‚ñ≥‚¨ùx‚¨ùy) = y := by simp [snd, S, d, D, K, I]

  def unseat : ùïã := S‚¨ù(K‚¨ù(S‚¨ùI))‚¨ùK
  example {x y} : unseat‚¨ùx‚¨ùy = y‚¨ùx := by simp [unseat, S, d, D, K, I]
  --flip‚¨ù(b‚¨ùx‚¨ùy) = b‚¨ùy‚¨ùx

end chapter3